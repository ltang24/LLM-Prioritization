CVE-2025-0059 affects multiple versions of SAP NetWeaver Application Server ABAP
where applications built on SAP GUI for HTML improperly store user input in the
browser’s local storage, exposing sensitive data to unauthorized access. The
vulnerability stems from a design flaw in how the client-side interface caches
transactional input to enhance usability, inadvertently allowing data
persistence in a location that lacks sufficient isolation from system-level
actors. Specifically, if an adversary gains administrative control or direct
access to the victim’s operating system user directory, they can extract stored
browser data without needing to compromise the SAP application itself. The risk
to confidentiality is substantial, as the nature of the exposed data depends on
the user’s activity within SAP transactions—ranging from benign entries to
highly sensitive business information. The attack surface is broad, given that
the vulnerable functionality is accessible through standard application flows
and does not require proximity or specialized conditions. Exploitation is
straightforward for actors with local system access, and no complex timing or
environmental dependencies are needed to trigger the flaw. While the
vulnerability does not inherently cross security boundaries beyond the affected
component, the potential for data leakage remains significant within its scope.
Real-world exploitation could occur in scenarios where a malicious insider or
compromised endpoint allows an attacker to browse local storage artifacts,
especially in enterprise environments where SAP GUI for HTML is widely deployed
across user workstations. Mitigation should focus on disabling or restricting
the use of local storage for sensitive input within SAP GUI for HTML, applying
SAP’s recommended patches, and enforcing strict endpoint security controls to
prevent unauthorized directory access. Organizations should also consider
browser hardening and session management policies to reduce residual data
exposure. Given the clarity of the technical mechanism and the well-defined
conditions under which exploitation is viable, confidence in the assessment is
high, though the actual impact will vary depending on deployment context and
user behavior.
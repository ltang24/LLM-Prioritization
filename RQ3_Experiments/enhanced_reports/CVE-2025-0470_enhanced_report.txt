CVE-2025-0470 concerns a vulnerability described in available metadata as: The
Forminator Forms – Contact Form, Payment Form & Custom Form Builder plugin for
WordPress is vulnerable to Reflected Cross-Site Scripting via the title
parameter in all versions up to, and including, 1.38.2 due to insufficient input
sanitization and output escaping. This makes it possible for unauthenticated
attackers to inject arbitrary web scripts in pages that execute if they can
successfully trick a user into performing an action such as clicking on a link..
Regarding attack vector, analysis indicates that Based on the provided
information only, the vulnerable operation is reachable through the component’s
normal input path. An actor can attempt to supply crafted data that flows to the
affected code path without requiring special physical proximity. Regarding
attack complexity, analysis indicates that No unusual timing or environment
constraints are implied beyond providing inputs that reach the vulnerable code.
Exploitation relies on typical parsing and handling of supplied data. Regarding
privileges required, analysis indicates that Access requirements follow the
interface exposure described. If the operation sits behind authentication, an
account with ordinary permissions is needed to invoke the flow. Regarding user
interaction, analysis indicates that Triggering appears to be at the actor’s
will once the interface is reachable; no additional human interaction is implied
unless a second party must handle content. Regarding scope, analysis indicates
that Effects remain within the component’s authority unless the vulnerable
action influences a distinct backend or security boundary, which would extend
impact beyond the immediate module. Regarding confidentiality impact, analysis
indicates that Information disclosure is plausible if the operation reveals or
returns data not intended for the requester, depending on how the system handles
and exposes results. Regarding integrity impact, analysis indicates that Data
tampering is possible if the vulnerable behavior allows unintended modification
of stored content or state; otherwise integrity effects are not presumed.
Regarding availability impact, analysis indicates that Repeated triggering or
expensive code paths could degrade throughput or lead to service disruption
through resource exhaustion. From a risk perspective, the practical attack
surface and operational preconditions should be assessed within each deployment
to gauge the plausibility of abuse and potential business impact; operators
should prioritize vendor patches or configuration hardening that removes the
vulnerable code path, enforce least-privilege, tighten input handling, and
increase monitoring around suspicious access to sensitive resources. This
fallback summary is derived from structured notes and should be treated as
provisional when compared with a full narrative written by a large language
model.
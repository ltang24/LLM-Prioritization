{
  "CVE Code": "CVE-2021-47226",
  "Published": "2024-05-21T14:19:30.864Z",
  "Updated": "2025-05-04T07:06:41.696Z",
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nx86/fpu: Invalidate FPU state after a failed XRSTOR from a user buffer\n\nBoth Intel and AMD consider it to be architecturally valid for XRSTOR to\nfail with #PF but nonetheless change the register state.  The actual\nconditions under which this might occur are unclear [1], but it seems\nplausible that this might be triggered if one sibling thread unmaps a page\nand invalidates the shared TLB while another sibling thread is executing\nXRSTOR on the page in question.\n\n__fpu__restore_sig() can execute XRSTOR while the hardware registers\nare preserved on behalf of a different victim task (using the\nfpu_fpregs_owner_ctx mechanism), and, in theory, XRSTOR could fail but\nmodify the registers.\n\nIf this happens, then there is a window in which __fpu__restore_sig()\ncould schedule out and the victim task could schedule back in without\nreloading its own FPU registers. This would result in part of the FPU\nstate that __fpu__restore_sig() was attempting to load leaking into the\nvictim task's user-visible state.\n\nInvalidate preserved FPU registers on XRSTOR failure to prevent this\nsituation from corrupting any state.\n\n[1] Frequent readers of the errata lists might imagine \"complex\n    microarchitectural conditions\".",
  "ProblemTypes": [
    "N/A"
  ],
  "Affected": [
    {
      "vendor": "Linux",
      "product": "Linux",
      "versions": [
        "1d731e731c4cd7cbd3b1aa295f0932e7610da82f",
        "1d731e731c4cd7cbd3b1aa295f0932e7610da82f",
        "1d731e731c4cd7cbd3b1aa295f0932e7610da82f"
      ]
    },
    {
      "vendor": "Linux",
      "product": "Linux",
      "versions": [
        "5.2",
        "0",
        "5.10.46",
        "5.12.13",
        "5.13"
      ]
    }
  ],
  "Reference": [
    "https://git.kernel.org/stable/c/a7748e021b9fb7739e3cb88449296539de0b6817",
    "https://git.kernel.org/stable/c/002665dcba4bbec8c82f0aeb4bd3f44334ed2c14",
    "https://git.kernel.org/stable/c/d8778e393afa421f1f117471144f8ce6deb6953a"
  ]
}
{
  "CVE Code": "CVE-2025-21664",
  "Published": "2025-01-21T12:18:19.015Z",
  "Updated": "2025-05-04T07:18:30.814Z",
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndm thin: make get_first_thin use rcu-safe list first function\n\nThe documentation in rculist.h explains the absence of list_empty_rcu()\nand cautions programmers against relying on a list_empty() ->\nlist_first() sequence in RCU safe code.  This is because each of these\nfunctions performs its own READ_ONCE() of the list head.  This can lead\nto a situation where the list_empty() sees a valid list entry, but the\nsubsequent list_first() sees a different view of list head state after a\nmodification.\n\nIn the case of dm-thin, this author had a production box crash from a GP\nfault in the process_deferred_bios path.  This function saw a valid list\nhead in get_first_thin() but when it subsequently dereferenced that and\nturned it into a thin_c, it got the inside of the struct pool, since the\nlist was now empty and referring to itself.  The kernel on which this\noccurred printed both a warning about a refcount_t being saturated, and\na UBSAN error for an out-of-bounds cpuid access in the queued spinlock,\nprior to the fault itself.  When the resulting kdump was examined, it\nwas possible to see another thread patiently waiting in thin_dtr's\nsynchronize_rcu.\n\nThe thin_dtr call managed to pull the thin_c out of the active thins\nlist (and have it be the last entry in the active_thins list) at just\nthe wrong moment which lead to this crash.\n\nFortunately, the fix here is straight forward.  Switch get_first_thin()\nfunction to use list_first_or_null_rcu() which performs just a single\nREAD_ONCE() and returns NULL if the list is already empty.\n\nThis was run against the devicemapper test suite's thin-provisioning\nsuites for delete and suspend and no regressions were observed.",
  "ProblemTypes": [
    "N/A"
  ],
  "Affected": [
    {
      "vendor": "Linux",
      "product": "Linux",
      "versions": [
        "b10ebd34cccae1b431caf1be54919aede2be7cbe",
        "b10ebd34cccae1b431caf1be54919aede2be7cbe",
        "b10ebd34cccae1b431caf1be54919aede2be7cbe",
        "b10ebd34cccae1b431caf1be54919aede2be7cbe",
        "b10ebd34cccae1b431caf1be54919aede2be7cbe",
        "b10ebd34cccae1b431caf1be54919aede2be7cbe",
        "b10ebd34cccae1b431caf1be54919aede2be7cbe"
      ]
    },
    {
      "vendor": "Linux",
      "product": "Linux",
      "versions": [
        "3.15",
        "0",
        "5.4.290",
        "5.10.234",
        "5.15.177",
        "6.1.125",
        "6.6.72",
        "6.12.10",
        "6.13"
      ]
    }
  ],
  "Reference": [
    "https://git.kernel.org/stable/c/ec037fe8c0d0f6140e3d8a49c7b29cb5582160b8",
    "https://git.kernel.org/stable/c/cd30a3960433ec2db94b3689752fa3c5df44d649",
    "https://git.kernel.org/stable/c/802666a40c71a23542c43a3f87e3a2d0f4e8fe45",
    "https://git.kernel.org/stable/c/12771050b6d059eea096993bf2001da9da9fddff",
    "https://git.kernel.org/stable/c/6b305e98de0d225ccebfb225730a9f560d28ecb0",
    "https://git.kernel.org/stable/c/cbd0d5ecfa390ac29c5380200147d09c381b2ac6",
    "https://git.kernel.org/stable/c/80f130bfad1dab93b95683fc39b87235682b8f72"
  ]
}
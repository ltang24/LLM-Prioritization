{
  "CVE Code": "CVE-2024-26921",
  "Published": "2024-04-18T09:47:58.632Z",
  "Updated": "2025-05-04T08:59:45.052Z",
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\ninet: inet_defrag: prevent sk release while still in use\n\nip_local_out() and other functions can pass skb->sk as function argument.\n\nIf the skb is a fragment and reassembly happens before such function call\nreturns, the sk must not be released.\n\nThis affects skb fragments reassembled via netfilter or similar\nmodules, e.g. openvswitch or ct_act.c, when run as part of tx pipeline.\n\nEric Dumazet made an initial analysis of this bug.  Quoting Eric:\n  Calling ip_defrag() in output path is also implying skb_orphan(),\n  which is buggy because output path relies on sk not disappearing.\n\n  A relevant old patch about the issue was :\n  8282f27449bf (\"inet: frag: Always orphan skbs inside ip_defrag()\")\n\n  [..]\n\n  net/ipv4/ip_output.c depends on skb->sk being set, and probably to an\n  inet socket, not an arbitrary one.\n\n  If we orphan the packet in ipvlan, then downstream things like FQ\n  packet scheduler will not work properly.\n\n  We need to change ip_defrag() to only use skb_orphan() when really\n  needed, ie whenever frag_list is going to be used.\n\nEric suggested to stash sk in fragment queue and made an initial patch.\nHowever there is a problem with this:\n\nIf skb is refragmented again right after, ip_do_fragment() will copy\nhead->sk to the new fragments, and sets up destructor to sock_wfree.\nIOW, we have no choice but to fix up sk_wmem accouting to reflect the\nfully reassembled skb, else wmem will underflow.\n\nThis change moves the orphan down into the core, to last possible moment.\nAs ip_defrag_offset is aliased with sk_buff->sk member, we must move the\noffset into the FRAG_CB, else skb->sk gets clobbered.\n\nThis allows to delay the orphaning long enough to learn if the skb has\nto be queued or if the skb is completing the reasm queue.\n\nIn the former case, things work as before, skb is orphaned.  This is\nsafe because skb gets queued/stolen and won't continue past reasm engine.\n\nIn the latter case, we will steal the skb->sk reference, reattach it to\nthe head skb, and fix up wmem accouting when inet_frag inflates truesize.",
  "ProblemTypes": [
    "N/A"
  ],
  "Affected": [
    {
      "vendor": "Linux",
      "product": "Linux",
      "versions": [
        "7026b1ddb6b8d4e6ee33dc2bd06c0ca8746fa7ab",
        "7026b1ddb6b8d4e6ee33dc2bd06c0ca8746fa7ab",
        "7026b1ddb6b8d4e6ee33dc2bd06c0ca8746fa7ab",
        "7026b1ddb6b8d4e6ee33dc2bd06c0ca8746fa7ab",
        "7026b1ddb6b8d4e6ee33dc2bd06c0ca8746fa7ab",
        "7026b1ddb6b8d4e6ee33dc2bd06c0ca8746fa7ab",
        "7026b1ddb6b8d4e6ee33dc2bd06c0ca8746fa7ab"
      ]
    },
    {
      "vendor": "Linux",
      "product": "Linux",
      "versions": [
        "4.1",
        "0",
        "5.4.285",
        "5.10.227",
        "5.15.168",
        "6.1.85",
        "6.6.26",
        "6.8.5",
        "6.9"
      ]
    }
  ],
  "Reference": [
    "https://git.kernel.org/stable/c/1b6de5e6575b56502665c65cf93b0ae6aa0f51ab",
    "https://git.kernel.org/stable/c/9705f447bf9a6cd088300ad2c407b5e1c6591091",
    "https://git.kernel.org/stable/c/4318608dc28ef184158b4045896740716bea23f0",
    "https://git.kernel.org/stable/c/7d0567842b78390dd9b60f00f1d8f838d540e325",
    "https://git.kernel.org/stable/c/f4877225313d474659ee53150ccc3d553a978727",
    "https://git.kernel.org/stable/c/e09cbe017311508c21e0739e97198a8388b98981",
    "https://git.kernel.org/stable/c/18685451fc4e546fc0e718580d32df3c0e5c8272"
  ]
}
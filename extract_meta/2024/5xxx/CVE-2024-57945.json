{
  "CVE Code": "CVE-2024-57945",
  "Published": "2025-01-21T12:18:12.548Z",
  "Updated": "2025-05-22T12:40:03.484Z",
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nriscv: mm: Fix the out of bound issue of vmemmap address\n\nIn sparse vmemmap model, the virtual address of vmemmap is calculated as:\n((struct page *)VMEMMAP_START - (phys_ram_base >> PAGE_SHIFT)).\nAnd the struct page's va can be calculated with an offset:\n(vmemmap + (pfn)).\n\nHowever, when initializing struct pages, kernel actually starts from the\nfirst page from the same section that phys_ram_base belongs to. If the\nfirst page's physical address is not (phys_ram_base >> PAGE_SHIFT), then\nwe get an va below VMEMMAP_START when calculating va for it's struct page.\n\nFor example, if phys_ram_base starts from 0x82000000 with pfn 0x82000, the\nfirst page in the same section is actually pfn 0x80000. During\ninit_unavailable_range(), we will initialize struct page for pfn 0x80000\nwith virtual address ((struct page *)VMEMMAP_START - 0x2000), which is\nbelow VMEMMAP_START as well as PCI_IO_END.\n\nThis commit fixes this bug by introducing a new variable\n'vmemmap_start_pfn' which is aligned with memory section size and using\nit to calculate vmemmap address instead of phys_ram_base.",
  "ProblemTypes": [
    "N/A"
  ],
  "Affected": [
    {
      "vendor": "Linux",
      "product": "Linux",
      "versions": [
        "8310080799b40fd9f2a8b808c657269678c149af",
        "a278d5c60f21aa15d540abb2f2da6e6d795c3e6e",
        "a11dd49dcb9376776193e15641f84fcc1e5980c9",
        "a11dd49dcb9376776193e15641f84fcc1e5980c9",
        "8af1c121b0102041809bc137ec600d1865eaeedd",
        "5941a90c55d3bfba732b32208d58d997600b44ef",
        "2a1728c15ec4f45ed9248ae22f626541c179bfbe"
      ]
    },
    {
      "vendor": "Linux",
      "product": "Linux",
      "versions": [
        "6.8",
        "0",
        "6.1.140",
        "6.6.72",
        "6.12.10",
        "6.13"
      ]
    }
  ],
  "Reference": [
    "https://git.kernel.org/stable/c/92f08673d3f1893191323572f60e3c62f2e57c2f",
    "https://git.kernel.org/stable/c/a4a7ac3d266008018f05fae53060fcb331151a14",
    "https://git.kernel.org/stable/c/d2bd51954ac8377c2f1eb1813e694788998add66",
    "https://git.kernel.org/stable/c/f754f27e98f88428aaf6be6e00f5cbce97f62d4b"
  ]
}
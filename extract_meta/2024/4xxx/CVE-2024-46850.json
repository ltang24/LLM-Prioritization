{
  "CVE Code": "CVE-2024-46850",
  "Published": "2024-09-27T12:42:43.967Z",
  "Updated": "2025-05-04T09:35:54.764Z",
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Avoid race between dcn35_set_drr() and dc_state_destruct()\n\ndc_state_destruct() nulls the resource context of the DC state. The pipe\ncontext passed to dcn35_set_drr() is a member of this resource context.\n\nIf dc_state_destruct() is called parallel to the IRQ processing (which\ncalls dcn35_set_drr() at some point), we can end up using already nulled\nfunction callback fields of struct stream_resource.\n\nThe logic in dcn35_set_drr() already tries to avoid this, by checking tg\nagainst NULL. But if the nulling happens exactly after the NULL check and\nbefore the next access, then we get a race.\n\nAvoid this by copying tg first to a local variable, and then use this\nvariable for all the operations. This should work, as long as nobody\nfrees the resource pool where the timing generators live.\n\n(cherry picked from commit 0607a50c004798a96e62c089a4c34c220179dcb5)",
  "ProblemTypes": [
    "N/A"
  ],
  "Affected": [
    {
      "vendor": "Linux",
      "product": "Linux",
      "versions": [
        "06ad7e16425619a4a77154c2e85bededb3e04a4f",
        "06ad7e16425619a4a77154c2e85bededb3e04a4f"
      ]
    },
    {
      "vendor": "Linux",
      "product": "Linux",
      "versions": [
        "6.7",
        "0",
        "6.10.11",
        "6.11"
      ]
    }
  ],
  "Reference": [
    "https://git.kernel.org/stable/c/42850927656a540428e58d370b3c1599a617bac7",
    "https://git.kernel.org/stable/c/e835d5144f5ef78e4f8828c63e2f0d61144f283a"
  ]
}
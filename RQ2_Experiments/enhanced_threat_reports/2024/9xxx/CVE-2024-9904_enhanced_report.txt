CVE-2024-9904 is a critical vulnerability affecting all versions up to 1.2.0 of
the web-based content management systems 07FLYCMS, 07FLY-CMS, and 07FlyCRM,
which are functionally identical under different naming conventions. The flaw
resides in the pictureUpload function within the /admin/File/pictureUpload
endpoint, where improper validation of the file parameter allows for
unrestricted file uploads. Specifically, the application fails to enforce strict
MIME type checks, file extension whitelisting, or path sanitization, thereby
enabling remote attackers to upload arbitrary files, including executable
scripts such as PHP or JSP, directly to the server. Once uploaded, these
malicious files can be accessed and executed via a web request, granting
attackers remote code execution capabilities with the privileges of the web
server process. The vulnerability is trivially exploitable over the internet
without authentication, requiring only a crafted HTTP POST request with a
malicious file payload, making the attack vector network-based and the attack
complexity low. Given the lack of authentication and minimal user interaction
required, the potential impact on confidentiality, integrity, and availability
is severe, especially in environments where the web server has elevated
privileges or access to sensitive backend systems. Public exploit code is
already available, significantly increasing the likelihood of widespread
exploitation in the wild. In real-world scenarios, threat actors could leverage
this vulnerability to establish persistent access, deploy web shells, exfiltrate
sensitive data, or pivot laterally within internal networks. Organizations using
affected versions in externally facing deployments are particularly at risk, as
automated scanning tools can easily identify and exploit the vulnerable
endpoint. Mitigation should prioritize immediate removal or disabling of the
pictureUpload functionality if not essential, or implementation of strict
server-side validation mechanisms, including file type and extension checks,
upload directory isolation, and execution prevention via web server
configuration (e.g., disabling script execution in upload directories).
Additionally, deploying a web application firewall (WAF) with rules to detect
and block malicious upload attempts can provide interim protection. As no vendor
patch is currently available and contact with the vendor has been unsuccessful
due to a non-functional communication channel, organizations should consider
isolating or replacing the affected software where feasible. Based on the
availability of public exploit code, the trivial nature of the attack, and the
lack of vendor response, our confidence in the accuracy and severity of this
intelligence is high.
CVE-2024-9894 is a critical SQL injection vulnerability identified in version
1.0 of the Blood Bank System developed by code-projects, specifically within the
`reset.php` script where improper input sanitization of the `useremail`
parameter allows unsanitized user input to be directly embedded into SQL
queries. The root cause lies in the failure to implement parameterized queries
or adequate escaping mechanisms, enabling attackers to manipulate SQL logic by
injecting crafted payloads through the `useremail` argument. This flaw is
remotely exploitable and does not require user interaction, making it
particularly dangerous in exposed web environments. The vulnerability is
accessible to authenticated users with low privileges, and due to the lack of
complexity in the attack vector—requiring only basic knowledge of SQL syntax and
HTTP request crafting—it presents a low barrier to exploitation. The impact of
successful exploitation includes unauthorized access to sensitive data,
potential modification or deletion of database records, and in some
configurations, full compromise of the underlying application logic. Publicly
available proof-of-concept exploits have been disclosed, increasing the
likelihood of widespread exploitation in the wild. In real-world scenarios, an
attacker could leverage this vulnerability to enumerate user accounts, extract
blood donor or recipient records, or escalate privileges by injecting
administrative credentials into the database. Given the nature of the
application—often deployed in healthcare or humanitarian contexts—the exposure
of personal health information or blood type data could have severe privacy and
operational consequences. Mitigation requires immediate remediation by
implementing input validation and prepared statements within the `reset.php`
module, along with deploying web application firewalls to detect and block
malicious payloads. Administrators are advised to audit all user input vectors,
apply least-privilege principles to database accounts, and monitor logs for
anomalous access patterns. As no official patch has been released by the vendor
at the time of writing, organizations should consider isolating or disabling the
vulnerable component until a fix is available. Based on the availability of
exploit code, the simplicity of the attack, and the criticality of the affected
data, the confidence in this threat intelligence assessment is high.
CVE-2024-9981 pertains to a critical vulnerability in FormosaSoft’s ee-class,
affecting all versions of the product, which fails to properly validate a
specific page parameter during file upload processes, thereby enabling remote
attackers with regular user privileges to upload malicious PHP files and
subsequently include them through the flawed parameter, culminating in arbitrary
code execution on the affected server. The root cause stems from an improper
control of filename handling within the PHP include/require statement,
classified under CWE-98, which permits attackers to bypass security checks and
execute arbitrary code by exploiting the lack of rigorous validation and
sanitization of user-supplied input, specifically the page parameter used in
file inclusion routines. Exploitation hinges on the attacker first
authenticating with at least basic privileges to upload a crafted PHP payload,
which, due to insufficient validation, is stored on the server. Subsequently, by
manipulating the page parameter to reference this malicious file, the attacker
triggers its inclusion, executing arbitrary code within the server’s context.
This chain of actions exploits the application’s failure to enforce strict
filename validation and access controls, leading to a full compromise of the
server environment. From a risk perspective, this vulnerability presents a high
severity, given its network-based exploitability, low attack complexity, and
minimal privileges required, coupled with the absence of user interaction, which
collectively facilitate rapid and widespread exploitation. The attack vector is
purely remote, requiring no physical access, and the exploitation process is
straightforward, involving a simple file upload followed by a crafted request to
include the malicious file, making it accessible to attackers with basic
knowledge of the application’s upload and inclusion mechanisms. In real-world
scenarios, this vulnerability could be exploited by threat actors to compromise
web servers hosting the affected application, enabling them to execute malicious
scripts that exfiltrate sensitive data, modify or delete critical files, or
deploy ransomware, thereby disrupting service availability and integrity. For
instance, an attacker could compromise a publicly accessible website, upload a
web shell disguised as a legitimate file, and then execute arbitrary commands to
escalate privileges or pivot to other parts of the network. Mitigation involves
implementing strict validation and sanitization of all user-controlled
parameters, especially those used in include or require statements, enforcing
file upload restrictions such as whitelisting allowed file types, and disabling
the execution of uploaded files in the upload directory unless explicitly
intended. Additionally, applying least privilege principles to the web server
process, ensuring proper permissions on uploaded files, and deploying Web
Application Firewalls (WAFs) to detect and block malicious payloads can
significantly reduce risk. Updating or patching the ee-class to versions that
incorporate input validation fixes is essential, alongside continuous security
monitoring for anomalous activities related to file uploads and inclusions. The
confidence level in this intelligence is high, supported by official
vulnerability disclosures, detailed CVSS analysis, and corroborating evidence
from authoritative sources, indicating a well-understood root cause and
exploitation mechanism, with minimal ambiguity regarding the impact and
mitigation strategies.